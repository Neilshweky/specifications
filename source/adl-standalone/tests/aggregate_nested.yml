database_name: "test"

collection_name: &collection_name "nested"

tests:
-
  description: "Aggregate on nested documents (project nested column)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $project: { _id: 0, foo.a: 1 }
          - $sort: { foo.a: 1 }
  outcome:
    result:
      - { foo: { a: 1 }}
      - { foo: { a: 2 }}
      - { foo: { a: 3 }}
      - { foo: { a: 4 }}
      - { foo: { a: 5 }}
-
  description: "Aggregate on nested documents (do not project nested column)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $project: { _id: 0, foo.a: 0 }
          - $sort: { foo.b: 1 }
  outcome:
    result:
      - { foo : { b : 2, c : 3 }, bar : { a : 4, b : 5, c : 6 } }
      - { foo : { b : 3, c : 4 }, bar : { a : 5, b : 6, c : 7 } }
      - { foo : { b : 4, c : 5 }, bar : { a : 6, b : 7, c : 8 } }
      - { foo : { b : 5, c : 6 }, bar : { a : 7, b : 8, c : 9 } }
      - { foo : { b : 6, c : 7 }, bar : { a : 8, b : 9, c : 10 } }
-
  description: "Aggregate on nested documents (sort, project non-existent column)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $sort: { foo.a: 1 }
          - $project: { _id: 0, foo.d: 1 }
  outcome:
    result:
      - { foo : { } }
      - { foo : { } }
      - { foo : { } }
      - { foo : { } }
      - { foo : { } }
-
  description: "Aggregate on nested documents (sort, project non-existent column with value)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $sort: { foo.a: 1 }
          - $project: { _id: 0, foo.d: $foo.d }
  outcome:
    result:
      - { foo : { } }
      - { foo : { } }
      - { foo : { } }
      - { foo : { } }
      - { foo : { } }
-
  description: "Aggregate on nested documents (project new nested column, sort)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $project: { _id: 0, foo.d: $foo.a }
          - $sort: { foo.d: 1 }
  outcome:
    result:
      - { foo : { } }
      - { foo : { } }
      - { foo : { } }
      - { foo : { } }
      - { foo : { } }
-
  description: "Aggregate on nested documents (project new column using add, sort)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $project: { _id: 0, foo.d: { $add: [ $foo.a, $foo.b ] } }
          - $sort: { foo.d: 1 }
  outcome:
    result:
      - { foo : { d: 3 } }
      - { foo : { d: 5 } }
      - { foo : { d: 7 } }
      - { foo : { d: 9 } }
      - { foo : { d: 11 } }
-
  description: "Aggregate on nested documents (project nested document attribute, sort)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $project: { _id: 0, foo: { a: 1 } }
          - $sort: { foo.a: 1 }
  outcome:
    result:
      - { foo : { a: 1 } }
      - { foo : { a: 2 } }
      - { foo : { a: 3 } }
      - { foo : { a: 4 } }
      - { foo : { a: 5 } }
-
  description: "Aggregate on nested documents (project out nested document attribute, sort)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $project: { _id: 0, foo: { a: 0 } }
          - $sort: { foo.a: 1 }
  outcome:
    result:
      - { "foo" : { "b" : 2, "c" : 3 }, "bar" : { "a" : 4, "b" : 5, "c" : 6 } }
      - { "foo" : { "b" : 3, "c" : 4 }, "bar" : { "a" : 5, "b" : 6, "c" : 7 } }
      - { "foo" : { "b" : 4, "c" : 5 }, "bar" : { "a" : 6, "b" : 7, "c" : 8 } }
      - { "foo" : { "b" : 5, "c" : 6 }, "bar" : { "a" : 7, "b" : 8, "c" : 9 } }
      - { "foo" : { "b" : 6, "c" : 7 }, "bar" : { "a" : 8, "b" : 9, "c" : 10 } }
-
  description: "Aggregate on nested documents (sort on non-existent nested attribute, project)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $sort: { foo.d: 1 }
          - $project: { _id: 0, foo.d: 1 }
  outcome:
    result:
      - { foo : { } }
      - { foo : { } }
      - { foo : { } }
      - { foo : { } }
      - { foo : { } }
-
  description: "Aggregate on nested documents (sort on non-existent nested attribute, project)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $project: { _id: 0, foo: { d: $foo.d } }
          - $sort: { foo.d: 1 }
  outcome:
    result:
      - { foo : { } }
-
  description: "Aggregate on nested documents (project using existing column value, sort)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $project: { _id: 0, foo: { d: $foo.a } }
          - $sort: { foo.d: 1 }
  outcome:
    result:
      - { foo : { } }
-
  description: "Aggregate on nested documents (project adding existing column values, sort)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $project: { _id: 0, foo: { d: { $add: [$foo.a, $foo.b] } } }
          - $sort: { foo.d: 1 }
  outcome:
    result:
      - { foo : { } }
-
  description: "Aggregate on nested documents (sort descending on nested attribute, project out nested attribute)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $sort: { foo.a: -1 }
          - $project: { _id: 0, foo.a: 0 }
  outcome:
    result:
      - { "foo" : { "b" : 6, "c" : 7 }, "bar" : { "a" : 8, "b" : 9, "c" : 10 } }
      - { "foo" : { "b" : 5, "c" : 6 }, "bar" : { "a" : 7, "b" : 8, "c" : 9 } }
      - { "foo" : { "b" : 4, "c" : 5 }, "bar" : { "a" : 6, "b" : 7, "c" : 8 } }
      - { "foo" : { "b" : 3, "c" : 4 }, "bar" : { "a" : 5, "b" : 6, "c" : 7 } }
      - { "foo" : { "b" : 2, "c" : 3 }, "bar" : { "a" : 4, "b" : 5, "c" : 6 } }
-
  description: "Aggregate on nested documents (replaceRoot, match)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $replaceRoot: { newRoot: $foo }
          - $match: { a: 1 }
  outcome:
    result:
      - { foo : { } }
-
  description: "Aggregate on nested documents (lookup, project)"
  operations:
    -
      object: collection
      name: aggregate
      arguments:
        pipeline:
          - $lookup: { from: bar, localField: foo.a, foreignField: a, as: docs }
          - $project: { _id: 0, docs._id: 0 }
  outcome:
    result:
      - { "foo" : { "a" : 1, "b" : 2, "c" : 3 }, "bar" : { "a" : 4, "b" : 5, "c" : 6 }, "docs" : [ { "a" : 1, "b" : 2, "c" : 3 } ] }
      - { "foo" : { "a" : 2, "b" : 3, "c" : 4 }, "bar" : { "a" : 5, "b" : 6, "c" : 7 }, "docs" : [ { "a" : 2, "b" : 3, "c" : 4 } ] }
      - { "foo" : { "a" : 3, "b" : 4, "c" : 5 }, "bar" : { "a" : 6, "b" : 7, "c" : 8 }, "docs" : [ { "a" : 3, "b" : 4, "c" : 5 } ] }
      - { "foo" : { "a" : 4, "b" : 5, "c" : 6 }, "bar" : { "a" : 7, "b" : 8, "c" : 9 }, "docs" : [ { "a" : 4, "b" : 5, "c" : 6 } ] }
      - { "foo" : { "a" : 5, "b" : 6, "c" : 7 }, "bar" : { "a" : 8, "b" : 9, "c" : 10 }, "docs" : [ { "a" : 5, "b" : 6, "c" : 7 } ] }
